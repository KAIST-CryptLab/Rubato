#include <iostream>
#include <string>
#include <stdint.h>
#include <x86intrin.h>

#include "parms.h"
#include "xof_shake.h"
#include "xof_aes.h"

alignas(32) const uint32_t idx[256][8] = {
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0},
    {0, 1, 0, 0, 0, 0, 0, 0},
    {2, 0, 0, 0, 0, 0, 0, 0},
    {0, 2, 0, 0, 0, 0, 0, 0},
    {1, 2, 0, 0, 0, 0, 0, 0},
    {0, 1, 2, 0, 0, 0, 0, 0},
    {3, 0, 0, 0, 0, 0, 0, 0},
    {0, 3, 0, 0, 0, 0, 0, 0},
    {1, 3, 0, 0, 0, 0, 0, 0},
    {0, 1, 3, 0, 0, 0, 0, 0},
    {2, 3, 0, 0, 0, 0, 0, 0},
    {0, 2, 3, 0, 0, 0, 0, 0},
    {1, 2, 3, 0, 0, 0, 0, 0},
    {0, 1, 2, 3, 0, 0, 0, 0},
    {4, 0, 0, 0, 0, 0, 0, 0},
    {0, 4, 0, 0, 0, 0, 0, 0},
    {1, 4, 0, 0, 0, 0, 0, 0},
    {0, 1, 4, 0, 0, 0, 0, 0},
    {2, 4, 0, 0, 0, 0, 0, 0},
    {0, 2, 4, 0, 0, 0, 0, 0},
    {1, 2, 4, 0, 0, 0, 0, 0},
    {0, 1, 2, 4, 0, 0, 0, 0},
    {3, 4, 0, 0, 0, 0, 0, 0},
    {0, 3, 4, 0, 0, 0, 0, 0},
    {1, 3, 4, 0, 0, 0, 0, 0},
    {0, 1, 3, 4, 0, 0, 0, 0},
    {2, 3, 4, 0, 0, 0, 0, 0},
    {0, 2, 3, 4, 0, 0, 0, 0},
    {1, 2, 3, 4, 0, 0, 0, 0},
    {0, 1, 2, 3, 4, 0, 0, 0},
    {5, 0, 0, 0, 0, 0, 0, 0},
    {0, 5, 0, 0, 0, 0, 0, 0},
    {1, 5, 0, 0, 0, 0, 0, 0},
    {0, 1, 5, 0, 0, 0, 0, 0},
    {2, 5, 0, 0, 0, 0, 0, 0},
    {0, 2, 5, 0, 0, 0, 0, 0},
    {1, 2, 5, 0, 0, 0, 0, 0},
    {0, 1, 2, 5, 0, 0, 0, 0},
    {3, 5, 0, 0, 0, 0, 0, 0},
    {0, 3, 5, 0, 0, 0, 0, 0},
    {1, 3, 5, 0, 0, 0, 0, 0},
    {0, 1, 3, 5, 0, 0, 0, 0},
    {2, 3, 5, 0, 0, 0, 0, 0},
    {0, 2, 3, 5, 0, 0, 0, 0},
    {1, 2, 3, 5, 0, 0, 0, 0},
    {0, 1, 2, 3, 5, 0, 0, 0},
    {4, 5, 0, 0, 0, 0, 0, 0},
    {0, 4, 5, 0, 0, 0, 0, 0},
    {1, 4, 5, 0, 0, 0, 0, 0},
    {0, 1, 4, 5, 0, 0, 0, 0},
    {2, 4, 5, 0, 0, 0, 0, 0},
    {0, 2, 4, 5, 0, 0, 0, 0},
    {1, 2, 4, 5, 0, 0, 0, 0},
    {0, 1, 2, 4, 5, 0, 0, 0},
    {3, 4, 5, 0, 0, 0, 0, 0},
    {0, 3, 4, 5, 0, 0, 0, 0},
    {1, 3, 4, 5, 0, 0, 0, 0},
    {0, 1, 3, 4, 5, 0, 0, 0},
    {2, 3, 4, 5, 0, 0, 0, 0},
    {0, 2, 3, 4, 5, 0, 0, 0},
    {1, 2, 3, 4, 5, 0, 0, 0},
    {0, 1, 2, 3, 4, 5, 0, 0},
    {6, 0, 0, 0, 0, 0, 0, 0},
    {0, 6, 0, 0, 0, 0, 0, 0},
    {1, 6, 0, 0, 0, 0, 0, 0},
    {0, 1, 6, 0, 0, 0, 0, 0},
    {2, 6, 0, 0, 0, 0, 0, 0},
    {0, 2, 6, 0, 0, 0, 0, 0},
    {1, 2, 6, 0, 0, 0, 0, 0},
    {0, 1, 2, 6, 0, 0, 0, 0},
    {3, 6, 0, 0, 0, 0, 0, 0},
    {0, 3, 6, 0, 0, 0, 0, 0},
    {1, 3, 6, 0, 0, 0, 0, 0},
    {0, 1, 3, 6, 0, 0, 0, 0},
    {2, 3, 6, 0, 0, 0, 0, 0},
    {0, 2, 3, 6, 0, 0, 0, 0},
    {1, 2, 3, 6, 0, 0, 0, 0},
    {0, 1, 2, 3, 6, 0, 0, 0},
    {4, 6, 0, 0, 0, 0, 0, 0},
    {0, 4, 6, 0, 0, 0, 0, 0},
    {1, 4, 6, 0, 0, 0, 0, 0},
    {0, 1, 4, 6, 0, 0, 0, 0},
    {2, 4, 6, 0, 0, 0, 0, 0},
    {0, 2, 4, 6, 0, 0, 0, 0},
    {1, 2, 4, 6, 0, 0, 0, 0},
    {0, 1, 2, 4, 6, 0, 0, 0},
    {3, 4, 6, 0, 0, 0, 0, 0},
    {0, 3, 4, 6, 0, 0, 0, 0},
    {1, 3, 4, 6, 0, 0, 0, 0},
    {0, 1, 3, 4, 6, 0, 0, 0},
    {2, 3, 4, 6, 0, 0, 0, 0},
    {0, 2, 3, 4, 6, 0, 0, 0},
    {1, 2, 3, 4, 6, 0, 0, 0},
    {0, 1, 2, 3, 4, 6, 0, 0},
    {5, 6, 0, 0, 0, 0, 0, 0},
    {0, 5, 6, 0, 0, 0, 0, 0},
    {1, 5, 6, 0, 0, 0, 0, 0},
    {0, 1, 5, 6, 0, 0, 0, 0},
    {2, 5, 6, 0, 0, 0, 0, 0},
    {0, 2, 5, 6, 0, 0, 0, 0},
    {1, 2, 5, 6, 0, 0, 0, 0},
    {0, 1, 2, 5, 6, 0, 0, 0},
    {3, 5, 6, 0, 0, 0, 0, 0},
    {0, 3, 5, 6, 0, 0, 0, 0},
    {1, 3, 5, 6, 0, 0, 0, 0},
    {0, 1, 3, 5, 6, 0, 0, 0},
    {2, 3, 5, 6, 0, 0, 0, 0},
    {0, 2, 3, 5, 6, 0, 0, 0},
    {1, 2, 3, 5, 6, 0, 0, 0},
    {0, 1, 2, 3, 5, 6, 0, 0},
    {4, 5, 6, 0, 0, 0, 0, 0},
    {0, 4, 5, 6, 0, 0, 0, 0},
    {1, 4, 5, 6, 0, 0, 0, 0},
    {0, 1, 4, 5, 6, 0, 0, 0},
    {2, 4, 5, 6, 0, 0, 0, 0},
    {0, 2, 4, 5, 6, 0, 0, 0},
    {1, 2, 4, 5, 6, 0, 0, 0},
    {0, 1, 2, 4, 5, 6, 0, 0},
    {3, 4, 5, 6, 0, 0, 0, 0},
    {0, 3, 4, 5, 6, 0, 0, 0},
    {1, 3, 4, 5, 6, 0, 0, 0},
    {0, 1, 3, 4, 5, 6, 0, 0},
    {2, 3, 4, 5, 6, 0, 0, 0},
    {0, 2, 3, 4, 5, 6, 0, 0},
    {1, 2, 3, 4, 5, 6, 0, 0},
    {0, 1, 2, 3, 4, 5, 6, 0},
    {7, 0, 0, 0, 0, 0, 0, 0},
    {0, 7, 0, 0, 0, 0, 0, 0},
    {1, 7, 0, 0, 0, 0, 0, 0},
    {0, 1, 7, 0, 0, 0, 0, 0},
    {2, 7, 0, 0, 0, 0, 0, 0},
    {0, 2, 7, 0, 0, 0, 0, 0},
    {1, 2, 7, 0, 0, 0, 0, 0},
    {0, 1, 2, 7, 0, 0, 0, 0},
    {3, 7, 0, 0, 0, 0, 0, 0},
    {0, 3, 7, 0, 0, 0, 0, 0},
    {1, 3, 7, 0, 0, 0, 0, 0},
    {0, 1, 3, 7, 0, 0, 0, 0},
    {2, 3, 7, 0, 0, 0, 0, 0},
    {0, 2, 3, 7, 0, 0, 0, 0},
    {1, 2, 3, 7, 0, 0, 0, 0},
    {0, 1, 2, 3, 7, 0, 0, 0},
    {4, 7, 0, 0, 0, 0, 0, 0},
    {0, 4, 7, 0, 0, 0, 0, 0},
    {1, 4, 7, 0, 0, 0, 0, 0},
    {0, 1, 4, 7, 0, 0, 0, 0},
    {2, 4, 7, 0, 0, 0, 0, 0},
    {0, 2, 4, 7, 0, 0, 0, 0},
    {1, 2, 4, 7, 0, 0, 0, 0},
    {0, 1, 2, 4, 7, 0, 0, 0},
    {3, 4, 7, 0, 0, 0, 0, 0},
    {0, 3, 4, 7, 0, 0, 0, 0},
    {1, 3, 4, 7, 0, 0, 0, 0},
    {0, 1, 3, 4, 7, 0, 0, 0},
    {2, 3, 4, 7, 0, 0, 0, 0},
    {0, 2, 3, 4, 7, 0, 0, 0},
    {1, 2, 3, 4, 7, 0, 0, 0},
    {0, 1, 2, 3, 4, 7, 0, 0},
    {5, 7, 0, 0, 0, 0, 0, 0},
    {0, 5, 7, 0, 0, 0, 0, 0},
    {1, 5, 7, 0, 0, 0, 0, 0},
    {0, 1, 5, 7, 0, 0, 0, 0},
    {2, 5, 7, 0, 0, 0, 0, 0},
    {0, 2, 5, 7, 0, 0, 0, 0},
    {1, 2, 5, 7, 0, 0, 0, 0},
    {0, 1, 2, 5, 7, 0, 0, 0},
    {3, 5, 7, 0, 0, 0, 0, 0},
    {0, 3, 5, 7, 0, 0, 0, 0},
    {1, 3, 5, 7, 0, 0, 0, 0},
    {0, 1, 3, 5, 7, 0, 0, 0},
    {2, 3, 5, 7, 0, 0, 0, 0},
    {0, 2, 3, 5, 7, 0, 0, 0},
    {1, 2, 3, 5, 7, 0, 0, 0},
    {0, 1, 2, 3, 5, 7, 0, 0},
    {4, 5, 7, 0, 0, 0, 0, 0},
    {0, 4, 5, 7, 0, 0, 0, 0},
    {1, 4, 5, 7, 0, 0, 0, 0},
    {0, 1, 4, 5, 7, 0, 0, 0},
    {2, 4, 5, 7, 0, 0, 0, 0},
    {0, 2, 4, 5, 7, 0, 0, 0},
    {1, 2, 4, 5, 7, 0, 0, 0},
    {0, 1, 2, 4, 5, 7, 0, 0},
    {3, 4, 5, 7, 0, 0, 0, 0},
    {0, 3, 4, 5, 7, 0, 0, 0},
    {1, 3, 4, 5, 7, 0, 0, 0},
    {0, 1, 3, 4, 5, 7, 0, 0},
    {2, 3, 4, 5, 7, 0, 0, 0},
    {0, 2, 3, 4, 5, 7, 0, 0},
    {1, 2, 3, 4, 5, 7, 0, 0},
    {0, 1, 2, 3, 4, 5, 7, 0},
    {6, 7, 0, 0, 0, 0, 0, 0},
    {0, 6, 7, 0, 0, 0, 0, 0},
    {1, 6, 7, 0, 0, 0, 0, 0},
    {0, 1, 6, 7, 0, 0, 0, 0},
    {2, 6, 7, 0, 0, 0, 0, 0},
    {0, 2, 6, 7, 0, 0, 0, 0},
    {1, 2, 6, 7, 0, 0, 0, 0},
    {0, 1, 2, 6, 7, 0, 0, 0},
    {3, 6, 7, 0, 0, 0, 0, 0},
    {0, 3, 6, 7, 0, 0, 0, 0},
    {1, 3, 6, 7, 0, 0, 0, 0},
    {0, 1, 3, 6, 7, 0, 0, 0},
    {2, 3, 6, 7, 0, 0, 0, 0},
    {0, 2, 3, 6, 7, 0, 0, 0},
    {1, 2, 3, 6, 7, 0, 0, 0},
    {0, 1, 2, 3, 6, 7, 0, 0},
    {4, 6, 7, 0, 0, 0, 0, 0},
    {0, 4, 6, 7, 0, 0, 0, 0},
    {1, 4, 6, 7, 0, 0, 0, 0},
    {0, 1, 4, 6, 7, 0, 0, 0},
    {2, 4, 6, 7, 0, 0, 0, 0},
    {0, 2, 4, 6, 7, 0, 0, 0},
    {1, 2, 4, 6, 7, 0, 0, 0},
    {0, 1, 2, 4, 6, 7, 0, 0},
    {3, 4, 6, 7, 0, 0, 0, 0},
    {0, 3, 4, 6, 7, 0, 0, 0},
    {1, 3, 4, 6, 7, 0, 0, 0},
    {0, 1, 3, 4, 6, 7, 0, 0},
    {2, 3, 4, 6, 7, 0, 0, 0},
    {0, 2, 3, 4, 6, 7, 0, 0},
    {1, 2, 3, 4, 6, 7, 0, 0},
    {0, 1, 2, 3, 4, 6, 7, 0},
    {5, 6, 7, 0, 0, 0, 0, 0},
    {0, 5, 6, 7, 0, 0, 0, 0},
    {1, 5, 6, 7, 0, 0, 0, 0},
    {0, 1, 5, 6, 7, 0, 0, 0},
    {2, 5, 6, 7, 0, 0, 0, 0},
    {0, 2, 5, 6, 7, 0, 0, 0},
    {1, 2, 5, 6, 7, 0, 0, 0},
    {0, 1, 2, 5, 6, 7, 0, 0},
    {3, 5, 6, 7, 0, 0, 0, 0},
    {0, 3, 5, 6, 7, 0, 0, 0},
    {1, 3, 5, 6, 7, 0, 0, 0},
    {0, 1, 3, 5, 6, 7, 0, 0},
    {2, 3, 5, 6, 7, 0, 0, 0},
    {0, 2, 3, 5, 6, 7, 0, 0},
    {1, 2, 3, 5, 6, 7, 0, 0},
    {0, 1, 2, 3, 5, 6, 7, 0},
    {4, 5, 6, 7, 0, 0, 0, 0},
    {0, 4, 5, 6, 7, 0, 0, 0},
    {1, 4, 5, 6, 7, 0, 0, 0},
    {0, 1, 4, 5, 6, 7, 0, 0},
    {2, 4, 5, 6, 7, 0, 0, 0},
    {0, 2, 4, 5, 6, 7, 0, 0},
    {1, 2, 4, 5, 6, 7, 0, 0},
    {0, 1, 2, 4, 5, 6, 7, 0},
    {3, 4, 5, 6, 7, 0, 0, 0},
    {0, 3, 4, 5, 6, 7, 0, 0},
    {1, 3, 4, 5, 6, 7, 0, 0},
    {0, 1, 3, 4, 5, 6, 7, 0},
    {2, 3, 4, 5, 6, 7, 0, 0},
    {0, 2, 3, 4, 5, 6, 7, 0},
    {1, 2, 3, 4, 5, 6, 7, 0},
    {0, 1, 2, 3, 4, 5, 6, 7}
};

void gen_coeffs(XOF* xof, uint64_t* out)
{
    // Set random vector from SHAKE256
    unsigned int ctr = 0;

    const __m256i zero = _mm256_setzero_si256();
    const __m256i mod1q = _mm256_set1_epi32(Q);
    const __m256i mask = _mm256_set1_epi32(Q_BIT_MASK);
    __m256i u0, u1, u2, u3, u4, u5, u6, u7, v0, v1, v2, v3;

    int g0, g1, g2, g3;

    uint64_t idx0, idx1, idx2, idx3;

    alignas(32) uint32_t tmp[XOF_ELEMENT_COUNT+8];

    alignas(32) uint8_t buf[32*4] = {0,};

    while (ctr <= XOF_ELEMENT_COUNT - 8*4)
    {
        xof->squeeze(buf, 32*4);
        u0 = _mm256_load_si256((__m256i *)buf);
        u1 = _mm256_load_si256((__m256i *)buf + 1);
        u2 = _mm256_load_si256((__m256i *)buf + 2);
        u3 = _mm256_load_si256((__m256i *)buf + 3);

        u0 = _mm256_and_si256(u0, mask);
        u1 = _mm256_and_si256(u1, mask);
        u2 = _mm256_and_si256(u2, mask);
        u3 = _mm256_and_si256(u3, mask);

        v0 = _mm256_cmpgt_epi32(mod1q, u0);
        v1 = _mm256_cmpgt_epi32(mod1q, u1);
        v2 = _mm256_cmpgt_epi32(mod1q, u2);
        v3 = _mm256_cmpgt_epi32(mod1q, u3);

        g0 = _mm256_movemask_ps((__m256)v0);
        g1 = _mm256_movemask_ps((__m256)v1);
        g2 = _mm256_movemask_ps((__m256)v2);
        g3 = _mm256_movemask_ps((__m256)v3);

        u0 = _mm256_permutevar8x32_epi32(u0, *(__m256i *)&idx[g0][0]);
        u1 = _mm256_permutevar8x32_epi32(u1, *(__m256i *)&idx[g1][0]);
        u2 = _mm256_permutevar8x32_epi32(u2, *(__m256i *)&idx[g2][0]);
        u3 = _mm256_permutevar8x32_epi32(u3, *(__m256i *)&idx[g3][0]);

        _mm256_storeu_si256((__m256i *)(tmp + ctr), u0);
        ctr += _mm_popcnt_u32(g0);
        _mm256_storeu_si256((__m256i *)(tmp + ctr), u1);
        ctr += _mm_popcnt_u32(g1);
        _mm256_storeu_si256((__m256i *)(tmp + ctr), u2);
        ctr += _mm_popcnt_u32(g2);
        _mm256_storeu_si256((__m256i *)(tmp + ctr), u3);
        ctr += _mm_popcnt_u32(g3);
    }

    while (ctr < XOF_ELEMENT_COUNT)
    {
        xof->squeeze(buf, 32);
        u0 = _mm256_load_si256((__m256i *)buf);
        u0 = _mm256_and_si256(u0, mask);
        v0 = _mm256_cmpgt_epi32(mod1q, u0);
        g0 = _mm256_movemask_ps((__m256)v0);

        u0 = _mm256_permutevar8x32_epi32(u0, *(__m256i *)&idx[g0][0]);
        _mm256_storeu_si256((__m256i *)(tmp + ctr), u0);
        ctr += _mm_popcnt_u32(g0);
    }

    for (int i = 0; i < XOF_ELEMENT_COUNT; i++)
    {
        out[i] = tmp[i];
    }
}

int main(int argc, char *argv[])
{
    uint64_t nonce;
    uint64_t counter;
    uint64_t coeffs[XOF_ELEMENT_COUNT];
    alignas(32) uint8_t buf[32];
    XOF* xof = new XOF();
    int repeat;

    if (argc != 2)
    {
        cout << "Usage : " << argv[0] << " [repeat]" << endl;
        exit(0);
    }

    repeat = stoi(argv[1]);
    xof->init();
    for (; repeat > 0; repeat--)
    {
        // *(uint64_t *)buf = nonce;
        // *(uint64_t *)(buf + 8) = counter;
        if (fread(buf, 1, 16, stdin) != 16)
        {
            abort();
        }
        xof->absorb_once(buf, 16);
        gen_coeffs(xof, coeffs);
        xof->reset();
        fwrite(coeffs, sizeof(uint64_t), XOF_ELEMENT_COUNT, stdout);
        fflush(stdout);
    }
    free(xof);
}
